#ifndef CORE_PEOPLEMON_ID_HPP
#define CORE_PEOPLEMON_ID_HPP

#include <cstdint>

namespace core
{
namespace pplmn
{
/**
 * @brief The id of a peoplemon
 *
 * @ingroup Peoplemon
 *
 */
enum struct Id : std::uint8_t {
    Unknown = 0,

    VinceA,
    VinceB,
    VinceC,
    JoeA,
    JoeB,
    JoeC,
    NickA,
    NickB,
    NickC,
    DominicA,
    DominicB,
    DominicC,
    BryanA,
    BryanB,
    BryanC,
    KrullA,
    KrullB,
    KrullC,
    MsMerrilA,
    MsMerrilB,
    MsMerrilC,
    JamesPabloA,
    JamesPabloB,
    JustinLA,
    JustinLB,
    BelleA,
    BelleB,
    BelleC,
    BelleD,
    AnnaA,
    AnnaB,
    AnnaC,
    AnnaD,
    AnnaE,
    AnnaF,
    AnnaG,
    AnnaH,
    MsNeutakiA,
    MsNuetakiB,
    Mike1A,
    Mike1B,
    Mike1C,
    JohnA,
    JohnB,
    JohnC,
    JohnD,
    ChrisA,
    ChrisB,
    ChrisC,
    MsMezzarosA,
    MsMezzarosB,
    MrMontanteC,
    MrMontante,
    MrSweigerlingA,
    MrSweigerlingB,
    JakeA,
    JakeB,
    QuinnA,
    QuinnB,
    QuinnC,
    BrandonA,
    BrandonB,
    BrandonC,
    LexiA,
    LexiB,
    LexiC,
    MsMeisnerA,
    MsMeisnerB,
    Justin,
    AbirajA,
    AbirajB,
    KylerMaleA,
    KylerMaleB,
    KylerMaleC,
    KylerFemaleA,
    KylerFemaleB,
    KylerFemaleC,
    MattA,
    MattB,
    MattC,
    BryanWagnerA,
    BryanWagnerB,
    BryanWagnerC,
    EmanualA,
    EmanualB,
    EmanualC,
    MaxBurgioA,
    MaxBurgioB,
    MaxBurgioC,
    Mike2A,
    Mike2B,
    Mike2C,
    StephaniePA,
    StephaniePB,
    StephaniePC,
    PiperA,
    PiperB,
    ColinA,
    ColinB,
    ColinC,
    JakeDA,
    JakeDB,
    SarahA,
    SarahB,
    SarahC,
    SarahD,
    JackiA,
    JackiB,
    LukeA,
    LukeB,
    LukeC,
    StephanieA,
    StephanieB,
    StephanieC,
    PonceA,
    PonceB,
    PamA,
    PamB,
    PamC,
    Kristina,
    Julie,
    Maggi,
    BenToo,
    Ben,
    RockManiac,

    _NUM_PEOPLEMON
};

} // namespace pplmn
} // namespace core

#endif
